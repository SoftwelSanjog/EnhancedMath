#Region "RoundUp & RoundDown"
Public Class EnhancedMath
    Private Delegate Function RoundingFunction(ByVal value As Double) As Double
    Public Enum RoundingDirection
        Up
        Down
    End Enum

    Public Shared Function RoundUp(ByVal value As Double, ByVal precision As Integer) As Double
        Return Round(value, precision, RoundingDirection.Up)
    End Function

    Public Shared Function RoundDown(ByVal value As Double, ByVal precision As Integer) _
        As Double
        Return Round(value, precision, RoundingDirection.Down)
    End Function

    Private Shared Function Round(ByVal value As Double, ByVal precision As Integer,
        ByVal roundingDirection As RoundingDirection) As Double
        Dim roundingFunction As RoundingFunction
        If roundingDirection = RoundingDirection.Up Then
            roundingFunction = AddressOf Math.Ceiling
        Else
            roundingFunction = AddressOf Math.Floor
        End If
        value = value * Math.Pow(10, precision)
        value = roundingFunction(value)
        Return value * Math.Pow(10, -1 * precision)
    End Function

    Public Shared Function Ceiling(ByVal value As Double, ByVal significance As Double) As Double
        If value Mod significance <> 0 Then
            Return (Math.Floor(value / significance) * significance) + significance
        End If

        Return Convert.ToDouble(value)
    End Function
    Public Shared Function Floor(ByVal value As Double, ByVal significance As Double) As Double
        If value Mod significance <> 0 Then
            Return (Math.Floor(value / significance) * significance)
        End If

        Return Convert.ToDouble(value)
    End Function
End Class
#End Region